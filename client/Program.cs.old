namespace RPCProxy.Client;

using System;
using System.Diagnostics;
using System.IO.Pipes;
using System.Text;
using RPCProxy.Shared.Discord;
using RPCProxy.Shared.Discord.Types;

public static class ProgramOld {
  public static void Main(string[] args) {

    TestFrameDecoding();
    // MockServer();
    // MockClient();

    Process.GetCurrentProcess().WaitForExit();
  }

  private static void TestFrameDecoding() {
    Console.WriteLine("Testing MessageFrame...");

    MessageFrame a = new MessageFrame(Opcode.Frame, "Hello World");
    Console.WriteLine(
      $"Input Frame: \n" +
        $" - Opcode:    {a.Header.Opcode}\n" +
        $" - CharCount: {a.Header.MessageLength}\n" +
        $" - Message:   {a.Message}\n" +
        $" - HEX =      {BitConverter.ToString(a.ToBytes()).Replace("-", " ")}"
    );

    MessageFrame b = new MessageFrame(a.ToBytes());
    Console.WriteLine(
      $"Output Frame: \n" +
        $" - Opcode:    {b.Header.Opcode}\n" +
        $" - CharCount: {b.Header.MessageLength}\n" +
        $" - Message:   {b.Message}\n" +
        $" - HEX =      {BitConverter.ToString(b.ToBytes()).Replace("-", " ")}"
    );
  }

  private static void MockServer() {
    var server = new IPCServer();
    int id = 0;
    
    server.OnMessageFrameReceived += (MessageFrame frame) =>
    {
      MessageFrame data = new MessageFrame(Opcode.Frame, "{\"cmd\":\"DISPATCH\",\"data\":{\"v\":1,\"config\":{\"cdn_host\":\"cdn.discordapp.com\",\"api_endpoint\":\"//discord.com/api\",\"environment\":\"production\"},\"user\":{\"id\":\"1061628834841120768\",\"username\":\"LolIamDumb\",\"discriminator\":\"9023\",\"avatar\":null,\"avatar_decoration\":null,\"bot\":false,\"flags\":0,\"premium_type\":0}},\"evt\":\"READY\",\"nonce\":null}");
      
      Console.WriteLine(
        "New Frame:\n" +
        $" - Header: \n" +
        $"   - Opcode:    {frame.Header.Opcode}\n" +
        $"   - CharCount: {frame.Header.MessageLength}\n" +
        $" - Body:\n" +
        $"   - Message:   {frame.Message}"
      );

      server.Send(data);
      File.WriteAllBytes($"results/outgoing-{id}.bin", data.ToBytes());

      File.WriteAllBytes($"results/incoming-{id}.bin", frame.ToBytes());

      id++;
    };
  }

  private static void MockClient() {

    DemoClient demo = new DemoClient();

    if (!Directory.Exists("results")) Directory.CreateDirectory("results");
    int id2 = 0;

    demo.OnMessageFrameReceived += (MessageFrame frame, NamedPipeClientStream pipe, MessageFrame dataSend) =>
    {
      File.WriteAllBytes($"results/outgoing2-{id2}.bin", dataSend.ToBytes());
      File.WriteAllBytes($"results/incoming2-{id2}.bin", frame.ToBytes());
      id2++;

      Console.WriteLine(
        "New Communication:\n" +
        $" - outgoing: \n" +
        $"   - Opcode:    {frame.Header.Opcode}\n" +
        $"   - CharCount: {frame.Header.MessageLength}\n" +
        $" - incoming:\n" +
        $"   - Message:   {frame.Message}"
      );
    };
  }
}